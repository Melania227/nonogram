{"version":3,"sources":["Size.jsx","utils.js","NonogramSolver.js","App.js","serviceWorker.js","index.js","NonogramSolver.module.css"],"names":["Size","size","onChange","min","defaultValue","value","strToNumArr","text","split","map","Number","filter","Boolean","Form","create","name","onRequirementChange","form","xRequirements","yRequirements","solution","width","height","cells","j","error","getError","push","Item","className","styles","input","style","getGridPosition","validateStatus","help","key","length","e","currentTarget","i","nonogram","gridTemplate","getGridTemplate","Nonogram","blockSize","Block","block","React","memo","borderTopWidth","undefined","borderLeftWidth","backgroundColor","labelXSize","labelYSize","repeat","column","row","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","max","test","cb","numbers","reduce","a","b","validateSum","DEFAULT_X","DEFAULT_Y","App","useState","setSize","setXRequirements","setYRequirements","setSolution","newSize","concat","Array","fill","slice","newYRequirements","newXRequirements","type","onClick","board","verify","verifyRow","idx","requirements","maxLength","getter","k","acc","isLast","findSolution","nextI","nextJ","solve","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.755b040c.chunk.js","sourcesContent":["import React from \"react\";\nimport { InputNumber } from \"antd\";\n\nexport default function Size({ size, onChange }) {\n  const onChange1 = value => onChange([value, size[1]]);\n  const onChange2 = value => onChange([size[0], value]);\n\n  return (\n    <div>\n      <InputNumber min={1} defaultValue={size[0]} onChange={onChange1} />\n      {\" X \"}\n      <InputNumber min={1} defaultValue={size[1]} onChange={onChange2} />\n    </div>\n  );\n}\n","export function solve({ xRequirements, yRequirements, width, height }) {\n  const board = new Array(height)\n    .fill(null)\n    .map(() => new Array(width).fill(false));\n  // xRequirements = xRequirements.map(text => strToNumArr(text));\n  // yRequirements = yRequirements.map(text => strToNumArr(text));\n\n  const findSolution = (i, j) => {\n    if (i === height) return true;\n\n    const nextI = i + (j + 1 === width ? 1 : 0);\n    const nextJ = (j + 1) % width;\n    board[i][j] = true;\n    if (verify(board, i, j) && findSolution(nextI, nextJ)) {\n      return true;\n    }\n    board[i][j] = false;\n    if (verify(board, i, j) && findSolution(nextI, nextJ)) {\n      return true;\n    }\n    return false;\n  };\n\n  const verify = (board, i, j) => {\n    return (\n      verifyRow(xRequirements[j], height, i, idx => board[idx][j]) &&\n      verifyRow(yRequirements[i], width, j, idx => board[i][idx])\n    );\n  };\n\n  const verifyRow = (requirements, maxLength, length, getter) => {\n    let k = 0;\n    let acc = 0;\n    let isLast = false;\n    for (let i = 0; i <= length; i++) {\n      if (getter(i)) {\n        acc++;\n        if (!isLast) {\n          if (k >= requirements.length) {\n            return false;\n          }\n        }\n        isLast = true;\n      } else {\n        if (isLast) {\n          if (requirements[k] !== acc) {\n            return false;\n          }\n          acc = 0;\n          k++;\n        }\n        isLast = false;\n      }\n    }\n\n    if (length === maxLength - 1) {\n      // make sure the row is done\n      if (isLast) {\n        return k === requirements.length - 1 && acc === requirements[k];\n      } else {\n        return k === requirements.length;\n      }\n    }\n\n    return true;\n  };\n\n  if (findSolution(0, 0)) {\n    return board;\n  }\n  return null;\n}\n\nconst printBoard = board => {\n  return board.map(row => row.map(i => (i ? '⏺' : '🅾️')).join(' ')).join('\\n');\n};\n\nexport function strToNumArr(text) {\n  return text\n    .split(/\\s+/)\n    .map(Number)\n    .filter(Boolean);\n}\n\n// const question = `\n// 2 4\n// 2 4\n// 3 4\n// 4 4 \n// 4 3\n// 4 4\n// 3 4\n// 3 5\n// 3 5\n// 2 6\n// 3 5\n// 3 5\n// 3 4\n// 4 3\n// 2 5\n// ---\n// 2\n// 3 1\n// 4 2\n// 5 3\n// 2 3 5\n// 2  2 3 2 1\n// 1 4 4 2\n// 6 2 4\n// 4 3 5\n// 3 8 1 \n// 2 6 1\n// 1 5 1\n// 4 \n// 2 \n// 1\n// `;\n\n// const [xRequirements, yRequirements] = question\n//   .trim()\n//   .split('---')\n//   .map(axis =>\n//     axis\n//       .trim()\n//       .split('\\n')\n//       .map(row => strToNumArr(row))\n//   );\n\n// console.log(\n//   printBoard(\n//     solve({\n//       xRequirements,\n//       yRequirements,\n//       width: 15,\n//       height: 15,\n//     })\n//   )\n// );\n","import React from 'react';\n\nimport { Input, Form } from 'antd';\nimport { strToNumArr } from './utils';\nimport styles from './NonogramSolver.module.css';\n\nfunction NonogramSolver({\n  size,\n  form,\n  onRequirementChange,\n  xRequirements,\n  yRequirements,\n  solution,\n}) {\n  const [width, height] = size;\n  const blockSize = 50;\n  const labelXSize = 100;\n  const labelYSize = 40;\n\n  const cells = [];\n\n  for (let j = 0; j < width; j++) {\n    const error = getError(xRequirements[j] || '', height);\n\n    cells.push(\n      <Form.Item\n        className={styles.input}\n        style={getGridPosition(j + 1, 0)}\n        validateStatus={error && 'error'}\n        help={error}\n        key={cells.length}\n      >\n        <Input\n          value={xRequirements[j] || ''}\n          onChange={e => {\n            const value = e.currentTarget.value;\n            onRequirementChange(value, j + 1, 0);\n          }}\n          size=\"small\"\n        />\n      </Form.Item>\n    );\n  }\n\n  for (let i = 0; i < height; i++) {\n    const error = getError(yRequirements[i] || '', width);\n    cells.push(\n      <Form.Item\n        className={styles.input}\n        style={getGridPosition(0, i + 1)}\n        validateStatus={error && 'error'}\n        help={error}\n        key={cells.length}\n      >\n        <Input\n          value={yRequirements[i] || ''}\n          onChange={e => {\n            const value = e.currentTarget.value;\n            onRequirementChange(value, 0, i + 1);\n          }}\n          size=\"small\"\n        />\n      </Form.Item>\n    );\n  }\n  return (\n    <div\n      className={styles.nonogram}\n      style={{\n        gridTemplate: getGridTemplate(\n          width,\n          height,\n          blockSize,\n          labelXSize,\n          labelYSize\n        ),\n        width: blockSize * width + labelXSize,\n      }}\n    >\n      {cells}\n      <Nonogram\n        width={width}\n        height={height}\n        blockSize={blockSize}\n        solution={solution}\n      />\n    </div>\n  );\n}\n\nexport default Form.create({ name: 'nonogram' })(NonogramSolver);\n\nfunction Block({ size, style }) {\n  return (\n    <div\n      className={styles.block}\n      style={{ ...style, width: size, height: size }}\n    />\n  );\n}\n\nconst Nonogram = React.memo(function({ width, height, blockSize, solution }) {\n  const cells = [];\n  for (let i = 0; i < height; i++) {\n    for (let j = 0; j < width; j++) {\n      cells.push(\n        <Block\n          size={blockSize}\n          style={{\n            ...getGridPosition(j + 1, i + 1),\n            borderTopWidth: i > 0 ? (i % 5 === 0 ? 4 : 0) : undefined,\n            borderLeftWidth: j > 0 ? (j % 5 === 0 ? 4 : 0) : undefined,\n            backgroundColor: solution && solution[i][j] ? '#333' : undefined,\n          }}\n          key={cells.length}\n        />\n      );\n    }\n  }\n  return cells;\n});\n\nfunction getGridTemplate(width, height, blockSize, labelXSize, labelYSize) {\n  return `${labelYSize}px ${` ${blockSize}px`.repeat(\n    height\n  )} / ${labelXSize}px ${` ${blockSize}px`.repeat(width)}`;\n}\n\nfunction getGridPosition(column, row) {\n  return {\n    gridColumnStart: column + 1,\n    gridColumnEnd: column + 2,\n    gridRowStart: row + 1,\n    gridRowEnd: row + 2,\n  };\n}\n\nfunction getError(text, max) {\n  if (!/^[0-9 ]*$/.test(text)) {\n    return 'Invalid characters';\n  }\n  if (!validateSum(text, max)) {\n    return 'Sum exceeded limit';\n  }\n  return null;\n}\n\nfunction validateSum(text, max, cb) {\n  const numbers = strToNumArr(text);\n  return numbers.reduce((a, b) => a + b, 0) + numbers.length - 1 <= max;\n}\n","import React from 'react';\nimport Size from './Size';\nimport NonogramSolver from './NonogramSolver';\nimport { Button } from 'antd';\nimport { solve, strToNumArr } from './utils';\nimport 'antd/dist/antd.css';\n\nconst DEFAULT_X = [\n  '4 4',\n  '1 2 3 2',\n  '13 1',\n  '13',\n  '4 2 2',\n  '7 1 1',\n  '1 4 1 2',\n  '1 3 3',\n  '1 4 1 2',\n  '7 1',\n  '4 2 1',\n  '13',\n  '8 3 2',\n  '1 6 2',\n  '4 4',\n];\nconst DEFAULT_Y = [\n  '3 3',\n  '1 1 5 1 1',\n  '1 4 4 1',\n  '6 6',\n  '13',\n  '12',\n  '3 5 3',\n  '6 6',\n  '5 2 2',\n  '1 2 3 2 1',\n  '1 2 1 2 1',\n  '1 2 3 2 1',\n  '3 2 2 1 1',\n  '1 2 3',\n  '4 3',\n];\n\nfunction App() {\n  const [size, setSize] = React.useState([15, 15]);\n  const [xRequirements, setXRequirements] = React.useState(DEFAULT_X);\n  const [yRequirements, setYRequirements] = React.useState(DEFAULT_Y);\n  const [solution, setSolution] = React.useState(null);\n\n  const onRequirementChange = (value, column, row) => {\n    if (column === 0) {\n      // y\n      const newYRequirements = [...yRequirements];\n      newYRequirements[row - 1] = value;\n      setYRequirements(newYRequirements);\n    } else {\n      // x\n      const newXRequirements = [...xRequirements];\n      newXRequirements[column - 1] = value;\n      setXRequirements(newXRequirements);\n    }\n  };\n  const onSizeChange = newSize => {\n    setSize(newSize);\n    if (xRequirements.length < newSize[0]) {\n      setXRequirements(\n        xRequirements.concat(\n          new Array(newSize[0] - xRequirements.length).fill(null)\n        )\n      );\n    } else if (xRequirements.length > newSize[0]) {\n      setXRequirements(xRequirements.slice(0, newSize[0]));\n    } else if (yRequirements.length < newSize[1]) {\n      setYRequirements(\n        yRequirements.concat(\n          new Array(newSize[1] - yRequirements.length).fill(null)\n        )\n      );\n    } else if (yRequirements.length > newSize[1]) {\n      setYRequirements(yRequirements.slice(0, newSize[1]));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Size size={size} onChange={onSizeChange} />\n      <NonogramSolver\n        size={size}\n        onRequirementChange={onRequirementChange}\n        xRequirements={xRequirements}\n        yRequirements={yRequirements}\n        solution={solution}\n      />\n      <Button\n        type=\"primary\"\n        onClick={() => {\n          setSolution(\n            solve({\n              xRequirements: xRequirements.map(strToNumArr),\n              yRequirements: yRequirements.map(strToNumArr),\n              width: size[0],\n              height: size[1],\n            })\n          );\n        }}\n      >\n        Solve\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nonogram\":\"NonogramSolver_nonogram__23Kjy\",\"row\":\"NonogramSolver_row__2OH0M\",\"block\":\"NonogramSolver_block__3qhGM\",\"label\":\"NonogramSolver_label__YFBEu\",\"input\":\"NonogramSolver_input__2ERQM\"};"],"sourceRoot":""}